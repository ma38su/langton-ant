{"version":3,"sources":["reportWebVitals.ts","components/Cell.tsx","components/Row.tsx","components/LongtonAnt.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cell","React","memo","props","state","type","className","Row","states","map","x","nextDirection","range","n","Array","keys","periodic","max","LongtonAnt","width","height","useState","stop","setStop","table","_","step","ants","Math","floor","y","dir","field","generateState","setState","animateRef","useRef","animate","useCallback","newField","ant","d","fary","d2","direction","rotateLeft","ny","length","useEffect","current","requestAnimationFrame","cancelAnimationFrame","handleStop","prev","array","value","onClick","queries","window","location","search","slice","split","reduce","o","kv","key","val","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a57fb7e0.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\n\ntype Props = {\n  state: boolean;\n};\n\nconst Cell = React.memo((props: Props) => {\n  const { state } = props;\n\n  return (\n    <input\n      type='button'\n      className={state ? 'alive' : 'dead'}\n      />\n  );\n});\nexport { Cell };","import React from 'react';\nimport { Cell } from './Cell';\n\ntype Props = {\n  y: number;\n  states: boolean[];\n};\n\nconst Row = React.memo((props: Props) => {\n  const {\n    states\n  } = props;\n\n  return (\n    <div className='row'>\n    {\n      states.map((state, x) => (\n        <Cell\n          key={x}\n          state={state}\n          />\n      ))\n    }\n  </div>);\n});\nexport { Row };","import React from 'react';\nimport { Row } from './Row';\n\nconst nextDirection = [\n  [0, -1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [-1, 1],\n  [-1, 0],\n  [-1, -1]\n];\n\nfunction range(n: number) {\n  return [...Array(n).keys()];\n}\nfunction generateState(width: number, height: number): State {\n  const table = range(height)\n    .map(_ => range(width).map(_ => false));\n\n  return {\n    step: 0,\n    ants: [\n      {x: Math.floor(width / 2), y: Math.floor(height / 2), dir: 6}\n    ],\n    field: table\n  };\n}\n\ntype Ant = {\n  x: number;\n  y: number;\n  dir: number;\n};\ntype State = {\n  step: number,\n  ants: Ant[];\n  field: boolean[][];\n};\n\ntype Props = {\n  width: number;\n  height: number;\n};\n\nfunction rotateRight(direction: number) {\n  return (direction + 2) & 0b111;\n}\n\nfunction rotateLeft(direction: number) {\n  return (direction + 6) & 0b111;\n}\n\nfunction periodic(n: number, max: number) {\n  if (n < 0) {\n    return max - 1;\n  } else if (n >= max) {\n    return 0;\n  }\n  return n;\n}\n\nfunction LongtonAnt(props: Props) {\n  const {\n    width, height,\n  } = props;\n\n  const [stop, setStop] = React.useState(true);\n  const [state, setState] = React.useState(generateState(width, height));\n\n  const animateRef = React.useRef(0);\n\n  const animate = React.useCallback(() => {\n    setState(state => {\n      const { step, ants, field } = state;\n      if (step > 11000) {\n        return state;\n      }\n\n      const newField = [...field];\n      const newAnts = ants.map(ant => {\n        const {x, y, dir: d} = ant;\n        const fary = [...newField[y]];\n        fary[x] = !field[y][x];\n        newField[y] = fary;\n\n        const d2 = field[y][x] ? rotateRight(d) : rotateLeft(d);\n        const ny = periodic(y + nextDirection[d2][1], field.length);\n        const nx = periodic(x + nextDirection[d2][0], field[ny].length);\n        return {\n          x: nx,\n          y: ny,\n          dir: d2\n        };\n      });\n      return {\n        step: step + 1,\n        ants: newAnts,\n        field: newField\n      };\n    });\n  }, []);\n  \n  React.useEffect(() => {\n    if (stop) return;\n    animateRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(animateRef.current);\n  }, [stop, state, animate]);\n\n  const handleStop = React.useCallback(() => {\n    setStop(prev => !prev);\n  }, []);\n\n  const { step, field } = state;\n  return (\n    <>\n    <h1>Longton Ant</h1>\n    {\n      field.map((array, y) => (\n        <Row\n          key={y}\n          states={array}\n          y={y}\n          />\n      ))\n    }\n      <p className='step'>Step: {step}</p>\n      <input\n      className='ctrl'\n      type='button'\n      value={stop ? 'Start' : 'Stop'}\n      onClick={handleStop} />\n    </>\n  );\n}\nexport { LongtonAnt };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { LongtonAnt } from './components/LongtonAnt';\nimport './index.css';\n\ntype Query = {\n  [key: string] : string;\n};\n\nconst queries = window.location.search.slice(1).split('&').reduce((o, kv) => {\n  const [key, val] = kv.split('=');\n  o[key] = val;\n  return o;\n}, {} as Query);\n\nconst width = parseInt(queries['width'] ?? '100');\nconst height = parseInt(queries['height'] ?? '100');\n\nReactDOM.render(\n  <React.StrictMode>\n    <LongtonAnt width={width} height={height} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}